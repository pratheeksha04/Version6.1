
Next_ImLoss=dmc.Flex(
    [
        dmc.Flex(
            [
                # dmc.Space(h="xl"),
                dmc.Text("Pe",size="sm", id="Imlosstype1Text",style={"color": "#5db1ec","fontWeight": "bold", "textAlign": "center", "padding": "8px"}),
                dmc.ScrollArea(
                    h="32%",
                    w="100%",
                    children=[
                        dmc.Table(
                            id='OrderTab1',
                            striped=False,
                            withTableBorder=True,
                            withColumnBorders=True,
                            px=50,className="custom-table",
                            style={"backgroundColor":"white","color":"black"}
                        ),
                    ]    
                ),
                dmc.Text("Pe",size="sm", id="Imlosstype2Text",style={"color": "#5db1ec","fontWeight": "bold", "textAlign": "center", "padding": "8px"}),
                dmc.ScrollArea(
                    h="32%",
                    w="100%",
                    children=[
                        dmc.Table(
                            id='OrderTab2',
                            striped=False,
                            withTableBorder=True,
                            withColumnBorders=True,
                            px=50,className="custom-table",
                            style={"backgroundColor":"white","color":"black"}
                        ),
                    ]    
                ),
                dmc.Text("Pe",size="sm", id="Imlosstype3Text",style={"color": "#5db1ec","fontWeight": "bold", "textAlign": "center", "padding": "8px"}),
                dmc.ScrollArea(
                    h="32%",
                    w="100%",
                    children=[
                        dmc.Table(
                            id='OrderTab3',
                            striped=False,
                            withTableBorder=True,
                            withColumnBorders=True,
                            px=50,className="custom-table",
                            style={"backgroundColor":"white","color":"black"}
                        ),
                    ]    
                ),
             
            ],
            style={
                'width': '40%',
                'height': 'calc(100vh - 10px)',
                'border': 'none',
                'marginTop': "15px",
                'overflowY': 'auto'
            },
            direction="column",
            gap="xs",
        ),
        dmc.Flex(
            [
                # dmc.Space(h="xl"),
                dmc.Text("Pe",size="sm", id="Imlosstype1textsetpoints",style={"color": "#5db1ec","fontWeight": "bold", "textAlign": "center", "padding": "8px"}),
                dmc.ScrollArea(
                    h="32%",
                    w="100%",
                    children=[
                        dmc.Table(
                            id='OrdMatCalc1',
                            striped=False,
                            withTableBorder=True,
                            withColumnBorders=True,
                            px=50,className="custom-table",
                            style={"backgroundColor":"white","color":"black"}
                        ),
                    ]    
                ),
                dmc.Text("Pe",size="sm", id="Imlosstype2textsetpoints",style={"color": "#5db1ec","fontWeight": "bold", "textAlign": "center", "padding": "8px"}),
                dmc.ScrollArea(
                    h="32%",
                    w="100%",
                    children=[
                        dmc.Table(
                            id='OrdMatCalc2',
                            striped=False,
                            withTableBorder=True,
                            withColumnBorders=True,
                            px=50,className="custom-table",
                            style={"backgroundColor":"white","color":"black"}
                        ),
                    ]    
                ),
                dmc.Text("Pe",size="sm", id="Imlosstype3textsetpoints",style={"color": "#5db1ec","fontWeight": "bold", "textAlign": "center", "padding": "8px"}),
                dmc.ScrollArea(
                    h="32%",
                    w="100%",
                    children=[
                        dmc.Table(
                            id='OrdMatCalc3',
                            striped=False,
                            withTableBorder=True,
                            withColumnBorders=True,
                            px=50,className="custom-table",
                            style={"backgroundColor":"white","color":"black"}
                        ),
                    ]    
                ),
             
            ],
            style={
                'width': '40%',
                'height': 'calc(100vh - 10px)',
                'border': 'none',
                'marginTop': "15px",
                'overflowY': 'auto'
            },
            direction="column",
            gap="xs",
        ),
        dmc.Flex(
            [
                html.Div(
                    [
                        html.Div(
                            [
                                dcc.Graph(id="graphImL1", style={"height": "100%", "width": "100%"}),
                                dmc.ActionIcon(
                                    id="open28",
                                    children=DashIconify(icon="iconamoon:screen-full-thin", width=30,color="white"),
                                    size="lg",
                                    color="#2e2e2e",
                                    variant="subtle",
                                    n_clicks=0,
                                    mb=10,
                                    style={
                                        "position": "absolute",
                                        "top": "2px",
                                        "left": "5px",
                                        "fontSize": "24px",
                                        "cursor": "pointer",
                                        "zIndex": 10  # Ensure the icon appears above the graph
                                    }
                                ),
                            ],
                            style={"position": "relative", "height": "100%", "width": "100%"}
                        )
                    ],
                    style={"height": "32%", "position": "relative"}  # Adjust the height as needed
                ),
                html.Div(
                    [
                        html.Div(
                            [
                                dcc.Graph(id="graphImL2", style={"height": "100%", "width": "100%"}),
                                dmc.ActionIcon(
                                    DashIconify(icon="iconamoon:screen-full-thin", width=30,color="white"),
                                    id="open29",
                                    size="lg",
                                    color="#2e2e2e",
                                    variant="subtle",
                                    n_clicks=0,
                                    mb=10,
                                    style={
                                        "position": "absolute",
                                        "top": "2px",
                                        "left": "5px",
                                        "fontSize": "24px",
                                        "cursor": "pointer",
                                        "zIndex": 10  # Ensure the icon appears above the graph
                                    }
                                ),
                            ],
                            style={"position": "relative", "height": "100%", "width": "100%"}
                        )
                    ],
                    style={"height": "32%", "position": "relative"}  # Adjust the height as needed
                ),
                html.Div(
                    [
                        html.Div(
                            [
                                dcc.Graph(id="graphImL3", style={"height": "100%", "width": "100%"}),
                                dmc.ActionIcon(
                                    DashIconify(icon="iconamoon:screen-full-thin", width=30,color="white"),
                                    id="open30",
                                    size="lg",
                                    color="#2e2e2e",
                                    variant="subtle",
                                    n_clicks=0,
                                    mb=10,
                                    style={
                                        "position": "absolute",
                                        "top": "2px",
                                        "left": "5px",
                                        "fontSize": "24px",
                                        "cursor": "pointer",
                                        "zIndex": 10  # Ensure the icon appears above the graph
                                    }
                                ),
                            ],
                            style={"position": "relative", "height": "100%", "width": "100%"}
                        )
                    ],
                    style={"height": "32%", "position": "relative"}  # Adjust the height as needed
                ),
                dmc.Modal(id="modal28",fullScreen=True,zIndex=10000,children=[ dcc.Graph(id="graphf28",style={'height': '800px'}),],),
                dmc.Modal(id="modal29",fullScreen=True,zIndex=10000,children=[ dcc.Graph(id="graphf29",style={'height': '800px'}),],),
                dmc.Modal(id="modal30",fullScreen=True,zIndex=10000,children=[ dcc.Graph(id="graphf30",style={'height': '800px'}),],),
                # dcc.Graph(id="graphTn1",style={"height":"32%"}),
                # dcc.Graph(id="graphTn2",style={"height":"32%"}),
                # dcc.Graph(id="graphTn3",style={"height":"32%"}),
            ],
            style={
                'width': '20%',
                'height': 'calc(100vh - 10px)',
                'border': 'none',
                'marginTop': "15px",
                # "background-color": "black"
            },
            direction="column",
            gap="xs",
        ),


        # dmc.Flex(
        #     [
        #         dcc.Graph(id="graphImL1",style={"height":"32%"}),
        #         dcc.Graph(id="graphImL2",style={"height":"32%"}),
        #         dcc.Graph(id="graphImL3",style={"height":"32%"}),
        #     ],
        #     style={
        #         'width': '20%',
        #         'height': 'calc(100vh - 10px)',
        #         'border': 'none',
        #         'marginTop': "15px",
        #         # "background-color": "black"
        #     },
        #     direction="column",
        #     gap="xs",
        # )
    ],
    direction="row",
    justify="flex-start",
    gap="xs",
    style={
        'width': '100%',
        'height': 'calc(100vh - 10px)',
        'border': 'none',
        'marginTop': "15px",
        # "background-color": "white"
    },
)




@app.callback(
    # Output('TnLossTab1', 'data'),
    Output('graphpl1','figure'),
    [Input("tabs", "value"),
        Input('ploss_types', 'value'),
     ]
)
def LosstypeDropDownValueChanged(tab ,selected_value):
    global IPMflag

    # TnLoss1={}
    # global TnScale_init,TnScale_inc,Tnfreqmap,dp
 
    # if selected_value is None:
    #     return [],dash.no_update
    # global ploss,ipm 
    if tab != "ploss-tab":
        return dash.no_update

    # Ensure selected value is available
    if selected_value is None:
        return dash.no_update

    if IPMflag == 0:
        crr = np.array([S1K, S5K, S10K, S15K]) + ipm.initial
        ipm.plaId,ipm.plaIq = ipmclass.filter(crr,ipm.rpm,ipm.Id,ipm.Iq)
        num=len(ipm.rpm)
        ipmclass.losscalc(ipm,mot,inv,igbt,Temp,Flag,num)
        gt = ipmclass.graphtool(ipm.IPMstatus,ipm.Id,ipm.Iq,ipm.Tn,ipm.Pe)
        IPMflag = 1

    ipm.Pbtt=np.real(ipm.Pbtt)
    ipm.Ploss=np.real(ipm.Ploss)
    ipm.Pcu=np.real(ipm.Pcu)
    ipm.Pfe=np.real(ipm.Pfe)
    ipm.Pstr=np.real(ipm.Pstr)
    ipm.Pfric=np.real(ipm.Pfric)
    ipm.Pinv=np.real(ipm.Pinv)
    ipm.Pwind=np.real(ipm.Pwind)
    ipm.posin=np.real(ipm.posin)
    ipm.negan=np.real(ipm.negan)
    ipm.n =np.real(ipm.n )

    print("ipm.Pstr",ipm.Pstr)
    if selected_value == "1":
        ploss = ipm.Pbtt
    elif selected_value == "2":
        ploss = ipm.Ploss
    elif selected_value == "3":
        ploss = ipm.Pcu
    elif selected_value == "4":
        ploss =ipm.Pfe
    elif selected_value == "5":
        ploss = ipm.Pstr
    elif selected_value == "6":
        ploss = ipm.Pfric
    elif selected_value == "7":
        ploss = ipm.Pwind
    elif selected_value == "8":
        ploss = ipm.Pinv
    elif selected_value == "9":
        ploss = ipm.posin
    elif selected_value == "10":
        ploss = ipm.negan
    elif selected_value == "11":
        ploss = ipm.n

    y=np.real(ipm.Tn)
    x = np.real(ipm.rpm[:len(y)])

    # Ensure all data are column vectors and reshape them
    x = x.reshape(-1, 1)
    y = y.reshape(-1, 1)
    ploss = ploss.reshape(-1, 1)

    # Remove duplicate points by averaging
    unique_points, idx = np.unique(np.hstack((x, y)), axis=0, return_inverse=True)
    x = unique_points[:, 0]
    y = unique_points[:, 1]
    ploss = np.array([np.mean(ploss[idx == i]) for i in range(len(unique_points))])

    # Create the scatter plot
    scatter = go.Scatter(
        x=x.flatten(),
        y=y.flatten(),
        mode='markers',
        marker=dict(
            color=ploss.flatten(),
            colorscale='Jet',
            size=10,
            colorbar=dict(
                title="Loss"
            ),
            line=dict(width=1, color='black')  # Edge color (similar to 'edgecolor' in Matplotlib)
        )
    )

    # Create figure


    # Add axis color and grid
    # fig.update_xaxes(showgrid=True, gridcolor='white', color='white')
    # fig.update_yaxes(showgrid=True, gridcolor='#4DBEEE', color='#4DBEEE')  

    # y=np.real(ipm.Tn)
    # x = np.real(ipm.rpm[:len(y)])

    # x = x.reshape(-1, 1).flatten()
    # y = y.reshape(-1, 1).flatten()
    # ploss = ploss.reshape(-1, 1).flatten()

    # # Remove duplicate points by averaging
    # unique_points, idx = np.unique(np.column_stack((x, y)), axis=0, return_inverse=True)
    # x = unique_points[:, 0]
    # y = unique_points[:, 1]
    # ploss = np.array([np.mean(ploss[idx == i]) for i in range(len(unique_points))])

    # # Create the scatter plot using Plotly
    # scatter = go.Scatter(
    #     x=x,
    #     y=y,
    #     mode='markers',
    #     marker=dict(size=8, color=ploss,  showscale=True, colorbar=dict(title='Ploss')),
    #     name='Scatter'
    # )

    # # Define the convex hull
    # hull = ConvexHull(np.column_stack((x, y)))
    # points = np.column_stack((x, y))
    # hull = ConvexHull(points)
    # k = hull.vertices
    # pgX = x[hull.vertices]
    # pgY = y[hull.vertices]
    points = np.column_stack((x, y))  # Assuming x and y are your data points
    distance_threshold = 5.0  # Adjust this threshold to get more points
    hull = ConvexHull(points)
     # k = hull.vertices
    extra_points = points_near_hull(points, hull.vertices, distance_threshold)

    print("extra_points",extra_points)
    pgX = x[extra_points]
    pgY = y[extra_points]
    # print("k",k)

    # # Create a grid within the polygon
    Xq, Yq = np.meshgrid(np.linspace(min(x), max(x), 100), np.linspace(min(y), max(y), 100))

    # Create a mask for points inside the polygon
    polygon = Path(np.column_stack((pgX, pgY)))
    in_polygon = polygon.contains_points(np.column_stack((Xq.ravel(), Yq.ravel()))).reshape(Xq.shape)

    zmin = np.min(ploss)
    zmax = np.max(ploss)
    pitch = 10  # Replace this with the actual value from your slider
    levels = np.linspace(zmin, zmax, pitch)

    # Interpolate the ploss values over the grid using 'cubic' interpolation
    Zq = griddata((x, y), ploss, (Xq, Yq), method='cubic')

    # Apply the mask: set values outside the polygon to NaN
    Zq[~in_polygon] = np.nan

    # Plot the contour map using Plotly
    contour = go.Contour(
        z=Zq,
        x=Xq[0, :],
        y=Yq[:, 0],
        colorscale='Jet',
        showscale=True,
        colorbar=dict(title='Ploss'),
        contours=dict(
            start=zmin,
            end=zmax,
            size=(zmax - zmin) / pitch
        )
    )
    fig = go.Figure(data=[scatter])

    # Add axis labels
    fig.update_layout(
        xaxis_title='RPM',
        yaxis_title='Tn',
        plot_bgcolor='rgba(0,0,0,0)',
        yaxis_showline=False,  # Make y-axis line invisible
        yaxis_zeroline=False,  # Make y-axis zero line invisible
        xaxis_showline=False,
        xaxis_showgrid=False,
        # paper_bgcolor='rgba(0,0,0,0)',
        font=dict(color='black')
    )
 
    return fig